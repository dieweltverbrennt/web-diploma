{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport apiRequest from '@/axios.js';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport axios from 'axios';\nexport default {\n  __name: 'LoginPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const router = useRouter();\n    onMounted(async () => {\n      // console.log(apiRequest.defaults)\n      // try {\n      //     const response = await apiRequest.get(`/login`, {\n      //         email: 'admin1@gmail.com',\n      //         name: 'admin1',\n      //         password: '123123123',\n      //         withCredentials: true \n      //         });\n      //     console.log(response);\n      // } catch (error) {\n      //     console.error('Ошибка при получении данных:', error);\n      // }\n    });\n    const onClick = e => {\n      e.preventDefault();\n      // axios.get('http://localhost:8080/sanctum/csrf-cookie', {\n      //   headers: {\n      //   'Content-Type': 'application/json',\n      //   'Accept': 'application/json',\n      //   'Access-Control-Allow-Origin': '*'\n      // },\n      // }).then(response => {\n      //   console.log(response)\n      // })\n\n      apiRequest.get('/sanctum/csrf-cookie', {\n        withCredentials: true\n      }).then(response => {\n        apiRequest.post('api/login', {\n          name: 'admin1',\n          password: '123123123',\n          withCredentials: true\n        }).then(response => {\n          console.log(response);\n        });\n      });\n\n      // apiRequest.post('/login', {\n      //   name: 'admin1',\n      //   password: '123123123',\n      //   withCredentials: true\n      // }).then(response => {\n      //   if(response.data.token) {\n      //     store.commit('login', response.data.token);\n      //     apiRequest.get('/access', {\n      //       headers: {\n      //         Authorization: `Bearer ${store.getters.token}`\n      //       }\n      //     }).then(response => {\n      //       if(response.data.success) {\n      //         router.push({ name: 'redactor-admin' });\n      //       }\n      //     })\n      //   } else {\n      //     console.error('Неверный логин или пароль')\n      //   }\n      // })\n    };\n\n    // if(this.v$.$invalid){\n    //             this.v$.$touch();\n    //             return;\n    //         }\n    //         const resp = await axios.get(config.appBackendURL+':'+config.appBackendPort+'/sanctum/csrf-cookie').then(\n    //             async authorisation =>{\n    //                 const response = await axios({\n    //                         method: 'POST',\n    //                         url: config.appBackendURL+':'+config.appBackendPort+'/api/login',\n    //                         data: {\n    //                             email: state.email,\n    //                             password: state.password,\n    //                         },\n    //                         headers: {\n    //                             'X-CSRF-Token': Cookies.get('XSRF-TOKEN')\n    //                         },\n    //                 }).then(response=>{\n    //                     if(response.data.status === false){\n    //                         state.response = response.data.message;\n    //                         setTimeout(function(){\n    //                             state.email = \"\";\n    //                             state.password=\"\";\n    //                             state.response=\"\";\n    //                         }, 3000)\n    //                     }else{\n    //                         state.response = response.data.message;\n    //                         setTimeout(()=>{\n    //                             token.getToken(response.data.token);\n    //                             window.location.href ='/main/';\n    //                         }, 2000);\n    //                     }\n    //                 })\n\n    //         }).catch(err=>{\n    //             console.log(err.response);\n    //                 if(err.response.status === 429){\n    //                     localStorage.setItem('Log', true);\n    //                     localStorage.setItem('repeatEmail', state.email);\n    //                     location.reload();\n    //                 }\n    //         }).finally(()=>{\n\n    //         })\n    //     }\n    //     return{\n    //         state,\n    //         AuthForm,\n    //         v$,\n    //     }\n\n    const __returned__ = {\n      store,\n      router,\n      onClick,\n      ref,\n      onMounted,\n      get apiRequest() {\n        return apiRequest;\n      },\n      get useStore() {\n        return useStore;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","apiRequest","useStore","useRouter","axios","store","router","onClick","e","preventDefault","get","withCredentials","then","response","post","name","password","console","log"],"sources":["C:/Users/Marya/Desktop/cinema-booking-app/client/src/components/admin/LoginPage.vue"],"sourcesContent":["<template>\r\n    <section class=\"login\">\r\n      <header class=\"login__header\">\r\n        <h2 class=\"login__title\">Авторизация</h2>\r\n      </header>\r\n      <div class=\"login__wrapper\">\r\n        <form class=\"login__form\" accept-charset=\"utf-8\">\r\n          <label class=\"login__label\" for=\"email\">\r\n            E-mail\r\n            <input class=\"login__input\" type=\"email\" placeholder=\"example@domain.xyz\" name=\"email\" required>\r\n          </label>\r\n          <label class=\"login__label\" for=\"pwd\">\r\n            Пароль\r\n            <input class=\"login__input\" type=\"password\" placeholder=\"\" name=\"password\" autocomplete=\"on\" required>\r\n          </label>\r\n          <div class=\"text-center\">\r\n            <input value=\"Авторизоваться\"  @click=\"onClick\" type=\"submit\" class=\"login__button\">\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue';\r\nimport apiRequest from '@/axios.js';\r\nimport { useStore } from 'vuex';\r\nimport { useRouter } from 'vue-router';\r\nimport axios from 'axios';\r\n\r\nconst store = useStore();\r\nconst router = useRouter();\r\n\r\nonMounted(async () => {\r\n    // console.log(apiRequest.defaults)\r\n    // try {\r\n    //     const response = await apiRequest.get(`/login`, {\r\n    //         email: 'admin1@gmail.com',\r\n    //         name: 'admin1',\r\n    //         password: '123123123',\r\n    //         withCredentials: true \r\n    //         });\r\n    //     console.log(response);\r\n    // } catch (error) {\r\n    //     console.error('Ошибка при получении данных:', error);\r\n    // }\r\n});\r\n\r\nconst onClick = ( (e) => {\r\n    e.preventDefault();\r\n    // axios.get('http://localhost:8080/sanctum/csrf-cookie', {\r\n    //   headers: {\r\n    //   'Content-Type': 'application/json',\r\n    //   'Accept': 'application/json',\r\n    //   'Access-Control-Allow-Origin': '*'\r\n    // },\r\n    // }).then(response => {\r\n    //   console.log(response)\r\n    // })\r\n\r\n    apiRequest.get('/sanctum/csrf-cookie', { withCredentials: true}).then(response => {\r\n      apiRequest.post('api/login', {\r\n        name: 'admin1',\r\n        password: '123123123',\r\n        withCredentials: true\r\n      }).then(response => {\r\n        console.log(response)\r\n      })\r\n    });\r\n\r\n\r\n\r\n    // apiRequest.post('/login', {\r\n    //   name: 'admin1',\r\n    //   password: '123123123',\r\n    //   withCredentials: true\r\n    // }).then(response => {\r\n    //   if(response.data.token) {\r\n    //     store.commit('login', response.data.token);\r\n    //     apiRequest.get('/access', {\r\n    //       headers: {\r\n    //         Authorization: `Bearer ${store.getters.token}`\r\n    //       }\r\n    //     }).then(response => {\r\n    //       if(response.data.success) {\r\n    //         router.push({ name: 'redactor-admin' });\r\n    //       }\r\n    //     })\r\n    //   } else {\r\n    //     console.error('Неверный логин или пароль')\r\n    //   }\r\n    // })\r\n});\r\n\r\n// if(this.v$.$invalid){\r\n//             this.v$.$touch();\r\n//             return;\r\n//         }\r\n//         const resp = await axios.get(config.appBackendURL+':'+config.appBackendPort+'/sanctum/csrf-cookie').then(\r\n//             async authorisation =>{\r\n//                 const response = await axios({\r\n//                         method: 'POST',\r\n//                         url: config.appBackendURL+':'+config.appBackendPort+'/api/login',\r\n//                         data: {\r\n//                             email: state.email,\r\n//                             password: state.password,\r\n//                         },\r\n//                         headers: {\r\n//                             'X-CSRF-Token': Cookies.get('XSRF-TOKEN')\r\n//                         },\r\n//                 }).then(response=>{\r\n//                     if(response.data.status === false){\r\n//                         state.response = response.data.message;\r\n//                         setTimeout(function(){\r\n//                             state.email = \"\";\r\n//                             state.password=\"\";\r\n//                             state.response=\"\";\r\n//                         }, 3000)\r\n//                     }else{\r\n//                         state.response = response.data.message;\r\n//                         setTimeout(()=>{\r\n//                             token.getToken(response.data.token);\r\n//                             window.location.href ='/main/';\r\n//                         }, 2000);\r\n//                     }\r\n//                 })\r\n\r\n//         }).catch(err=>{\r\n//             console.log(err.response);\r\n//                 if(err.response.status === 429){\r\n//                     localStorage.setItem('Log', true);\r\n//                     localStorage.setItem('repeatEmail', state.email);\r\n//                     location.reload();\r\n//                 }\r\n//         }).finally(()=>{\r\n\r\n//         })\r\n//     }\r\n//     return{\r\n//         state,\r\n//         AuthForm,\r\n//         v$,\r\n//     }\r\n</script>\r\n"],"mappings":"AAwBA,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,OAAOC,UAAU,MAAM,YAAY;AACnC,SAASC,QAAQ,QAAQ,MAAM;AAC/B,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAOC,KAAK,MAAM,OAAO;;;;;;;IAEzB,MAAMC,KAAK,GAAGH,QAAQ,CAAC,CAAC;IACxB,MAAMI,MAAM,GAAGH,SAAS,CAAC,CAAC;IAE1BH,SAAS,CAAC,YAAY;MAClB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAAA,CACH,CAAC;IAEF,MAAMO,OAAO,GAAMC,CAAC,IAAK;MACrBA,CAAC,CAACC,cAAc,CAAC,CAAC;MAClB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEAR,UAAU,CAACS,GAAG,CAAC,sBAAsB,EAAE;QAAEC,eAAe,EAAE;MAAI,CAAC,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAI;QAChFZ,UAAU,CAACa,IAAI,CAAC,WAAW,EAAE;UAC3BC,IAAI,EAAE,QAAQ;UACdC,QAAQ,EAAE,WAAW;UACrBL,eAAe,EAAE;QACnB,CAAC,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAI;UAClBI,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;QACvB,CAAC,CAAC;MACJ,CAAC,CAAC;;MAIF;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACJ,CAAE;;IAEF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}